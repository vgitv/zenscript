#!/usr/bin/python3
import subprocess
import shutil
import argparse
import pathlib

parser = argparse.ArgumentParser(description='Main script argument parser.')
parser.add_argument('--title', help='HTML main title.', default='Notes')
parser.add_argument('--debug', help='Debug option.', default=False)
parser.add_argument('--output', help='Output HTML file.', default='main_html_summary.html')
args = parser.parse_args()

p = subprocess.Popen(["/usr/bin/find", "-mindepth", "2", "-name", "*.html"], stdout=subprocess.PIPE)
output = p.communicate()[0].decode()
tree = output.split('\n')[:-1]
tree.sort()

def diffSection(previousSection, section):
    d = dict()
    for i, elt in enumerate(section):
        if len(previousSection) > i:
            if previousSection[i] != section[i]:
                d['h' + str(i+1)] = elt.replace('_', ' ')
        else:
            d['h' + str(i+1)] = elt.replace('_', ' ')
    return d
#}

shutil.copy(str(pathlib.Path.home()) + '/.local/src/css_styles/main-dark.css', '.')

html = '<!DOCTYPE html>\n'
html += '<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">\n'
html += '<head>\n'
html += '  <meta charset="utf-8" />\n'
html += '  <meta name="generator" content="pandoc" />\n'
html += '  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />\n'
html += '  <title>main</title>\n'
html += '  <style type="text/css">\n'
html += '      code{white-space: pre-wrap;}\n'
html += '      span.smallcaps{font-variant: small-caps;}\n'
html += '      span.underline{text-decoration: underline;}\n'
html += '      div.column{display: inline-block; vertical-align: top; width: 50%;}\n'
html += '  </style>\n'
html += '  <link rel="stylesheet" href="./main-dark.css" />\n'
html += '</head>\n'
html += '<body>\n'
html += '<h1 id="maintitle">{title}</h1>\n'.format(title=args.title)

previousSection = list()

for i, path in enumerate(tree):
    # pour la section, on enlève le dernier dossier et le fichier (et le ./ au début)
    elt = path.split('/')
    section = elt[1:-2]
    item = elt[-2].replace('_', ' ')
    h = diffSection(previousSection, section)

    if args.debug:
        print('Iteration', i)
        print('  path    :', path)
        print('  section :', section)
        print('  item    :', item)
        if section == previousSection:
            print('  INFO: same section than before, h should be empty:')
        else:
            print('  INFO: new section detected, h shows the diff against previous section:')
        print('  h:', h, '\n')

    # avant le titre suivant, on ferme la liste à puces
    if i > 0 and len(h) > 0:
        html += '</ul>\n'

    # écriture des titres
    for key in h:
        html += '<{hn}>{title}</{hn}>\n'.format(hn=key, title=h[key])

    # après le titre, on ouvre la liste à puces
    if len(h) > 0:
        html += '<ul>\n'

    html += '<li><a href="{ref}">{link}</a></li>\n'.format(ref=path, link=item)
    previousSection = section
#}

html += '</ul>\n'
html += '<br>\n' * 20
html += '</body>\n'
html += '</html>\n'

print('Title:', args.title)
print('INFO: writing html file...')
with open(args.output, 'w') as f:
    f.write(html)

print('INFO: {fichier} generated.'.format(fichier=args.output))
